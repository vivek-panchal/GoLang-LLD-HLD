/*
Introduction to API Gateways
-> An API Gateway is a server that acts as an intermediary between clients and backend services, managing and routing API requests.
-> It provides a single entry point for multiple services, handling tasks such as request routing, composition, and protocol translation.

How API Gateways Work
-> API Gateway act as a reverse proxy between clients and backend services.
-> It receives API requests from clients, processes them (e.g., authentication, rate limiting), and forwards them to the appropriate backend service.
-> Key functions include request transformation, authentication, rate limiting, logging, and monitoring.

Benefits of Using API Gateways
-> Security: Protects backend services from direct exposure.
-> Rate Limiting: Controls the number of requests to prevent abuse and DDoS attacks.
-> Load Balancing: Distributes incoming requests across multiple backend services.
-> Caching: Speeds up response times by caching frequent requests.
-> Request Transformation: Converts request formats, protocols, and headers.
-> Logging and Monitoring: Tracks API usage and performance metrics.

Security Features in API Gateways
-> Authentication: Verifies the identity of clients using methods like OAuth, JWT, or API keys.
-> Authorization: Ensures clients have permission to access specific resources.
-> Data Encryption: Secures data in transit using SSL/TLS.
-> DDoS Protection: Implements rate limiting and traffic filtering to mitigate DDoS attacks.
-> Bot Detection: Identifies and blocks malicious bot traffic.

Rate Limiting and Throttling
-> Rate Limiting: Restricts the number of requests a client can make in a given time period.
-> Throttling: Temporarily blocks or slows down requests from clients that exceed predefined limits.
-> Common strategies include fixed window, sliding window, and token bucket algorithms.

Caching for Performance Optimization
-> Caching: Speeds up response times by caching frequent requests.
-> Types of caching include in-memory caching, distributed caching, and edge caching. 
   1. In Memory caching: Store frequently accessed data in memory for quick retrieval. e.g., Redis, Memcached.
   2. Response Caching: Cache entire API responses to reduce backend load and improve response times.
   3. Edge Caching: Use CDNs to cache responses closer to the client, reducing latency.

API Composition and Aggregation
-> API gateways can combine multiple api calls into a single request, reducing the number of round trips between clients and backend services.
-> Useful for microservices architectures where a single client request may require data from multiple services.
-> Example: A mobile app request for user profile data may require information from user service, order service, and recommendation service. The API gateway can aggregate these calls into a single response.

Logging and Monitoring with API Gateways
-> Helps track API performance, errors and security threats.
-> Logs can be used for auditing, debugging, and analytics.
-> Supports integration with monitoring tools like Prometheus, Grafana, and ELK stack.

Popular API Gateway Implementations
-> OPEN SOURCE: Kong, Tyk, KrakenD, Ambassador.
-> CLOUD-BASED: AWS API Gateway, Azure API Management, Google Cloud Endpoints.
-> ENTERPRISE: Apigee, MuleSoft Anypoint Platform.


When to Use an API Gateway
-> Best suited for microservices architectures where multiple services need to be exposed through a single API.
-> Ideal for scenarios requiring cross-cutting concerns like authentication, logging, and rate limiting.
-> Not necessary for simple applications with a single backend service.

*/